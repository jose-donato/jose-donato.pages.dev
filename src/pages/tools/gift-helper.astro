---
import Layout from "../../layouts/Layout.astro";
import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { generateObject } from "ai";
import { GOOGLE_API_KEY } from "astro:env/server";
import { z } from "astro/zod";

const googleGenerativeAI = createGoogleGenerativeAI({
	apiKey: GOOGLE_API_KEY,
});
// Using gemini-1.5-flash for speed and cost-effectiveness
const model = googleGenerativeAI("gemini-1.5-flash");

// Define minimum tag count
const MIN_TAGS = 3;

// Define the expected schema for the AI response
const GiftSuggestionSchema = z
	.array(
		z.object({
			product: z.string(),
			price: z.string().optional(), // Make price optional as AI might not always provide it
		}),
	)
	.describe("The list of gift ideas");

type GiftSuggestion = z.infer<typeof GiftSuggestionSchema>;

// Initialize variables for form state and results
let error = "";
let result: GiftSuggestion = [];
let tagsValue = "";
let minPriceValue = "";
let maxPriceValue = "";
let ageValue = "";

// Handle form submission server-side
if (Astro.request.method === "POST") {
	try {
		const formData = await Astro.request.formData();
		const tagsRaw = formData.get("tags");
		const minPriceStr = formData.get("minPrice");
		const maxPriceStr = formData.get("maxPrice");
		const ageStr = formData.get("age");

		// Store submitted values for repopulation
		tagsValue = typeof tagsRaw === "string" ? tagsRaw : "";
		minPriceValue = typeof minPriceStr === "string" ? minPriceStr : "";
		maxPriceValue = typeof maxPriceStr === "string" ? maxPriceStr : "";
		ageValue = typeof ageStr === "string" ? ageStr : "";

		// Validate required fields
		if (!tagsValue || !minPriceValue || !maxPriceValue || !ageValue) {
			error = "Missing required fields (Tags, Min Price, Max Price, Age)";
		} else {
			// Validate numeric types
			const minPrice = Number(minPriceValue);
			const maxPrice = Number(maxPriceValue);
			const age = Number(ageValue);

			if (
				Number.isNaN(minPrice) ||
				Number.isNaN(maxPrice) ||
				Number.isNaN(age) ||
				minPrice < 0 ||
				maxPrice < 0 ||
				age < 0
			) {
				error = "Invalid numeric input for price or age.";
			} else if (minPrice > maxPrice) {
				error = "Minimum price cannot be greater than maximum price.";
			} else {
				// Process tags (split by comma, trim whitespace, filter empty)
				const tags = tagsValue
					.split(",")
					.map((tag) => tag.trim())
					.filter(Boolean);

				if (tags.length < MIN_TAGS) {
					error = `Please enter at least ${MIN_TAGS} tags, separated by commas.`;
				} else {
					// If validation passes, call the AI
					const prompt = `You are a gift suggestion expert.
You will be given a list of tags describing a person, occasion, or interests, their age, and a price range.
Suggest 5-10 relevant gift ideas based ONLY on these criteria.

The recipient's age is ${age}. Consider this when suggesting gifts.
The desired price range is $${minPrice} to $${maxPrice}. Keep suggestions strictly within this range.

Guidelines:
- Keep suggestions concise and relevant to the tags, age, and price range provided.
- Ensure suggestions are appropriate for the specified age.
- Ensure suggestions fall within the $${minPrice}-$${maxPrice} price range.
- Provide an estimated price for each suggestion if possible (e.g., "$50", "~$30"). If not possible, omit the price.
- Structure the response ONLY as a JSON array of objects, each with "product" and optional "price" keys.
- NEVER INCLUDE INTRODUCTORY TEXT, EXPLANATIONS OR EXTRA TEXT IN YOUR RESPONSE.

Tags: ${JSON.stringify(tags)}
Age: ${age}
Price Range: $${minPrice}-$${maxPrice}
Response JSON:`; // Explicitly ask for JSON

					const aiResponse = await generateObject({
						model: model,
						schema: GiftSuggestionSchema,
						prompt: prompt,
						maxTokens: 250, // Increased slightly for potentially longer lists/prices
						mode: "json", // Enforce JSON output mode
					});

					result = aiResponse?.object || [];

					if (result.length === 0) {
						// Even if the API call succeeded, it might return an empty array
						error = "No gift suggestions found for these criteria.";
					}
				}
			}
		}
	} catch (apiError) {
		console.error(
			"Error processing form or generating suggestions:",
			apiError,
		);
		// Attempt to provide a more specific error message if available
		error = "Failed to generate gift suggestions due to an internal error.";
		result = []; // Ensure result is empty on error
	}
}
---

<Layout seo={{ title: "GiftSense - AI-powered Gift Suggestions" }}>
	<div class="max-w-[700px] mx-auto">
		<h1 class="text-3xl font-bold mb-4 text-center">
			<span class="underline-animation">Gift</span>Sense
		</h1>

		<div class="flex justify-center items-center flex-col gap-2 my-5">
			<p>
				Get AI-powered gift suggestions based on tags, age, and price
				range.
			</p>
		</div>

		<div class="card p-6">
			<form method="POST" id="giftForm">
				<div class="mb-4">
					<label for="tags" class="block text-sm font-medium mb-1">
						Interests (comma-separated, min. {MIN_TAGS})
						<span class="text-red-500">*</span>
					</label>
					<textarea
						id="tags"
						name="tags"
						rows="3"
						required
						placeholder="e.g., reading, hiking, coffee lover, board games"
						class="w-full border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
						>{tagsValue}</textarea
					>
					<p class="text-xs text-gray-500 mt-1">
						Enter at least {MIN_TAGS} interests separated by commas.
					</p>
				</div>

				<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
					<div>
						<label
							for="minPrice"
							class="block text-sm font-medium mb-1"
						>
							Min Price ($) <span class="text-red-500">*</span>
						</label>
						<input
							type="number"
							id="minPrice"
							name="minPrice"
							value={minPriceValue}
							placeholder="e.g., 25"
							min="0"
							class="w-full border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
							required
						/>
					</div>
					<div>
						<label
							for="maxPrice"
							class="block text-sm font-medium mb-1"
						>
							Max Price ($) <span class="text-red-500">*</span>
						</label>
						<input
							type="number"
							id="maxPrice"
							name="maxPrice"
							value={maxPriceValue}
							placeholder="e.g., 100"
							min="0"
							class="w-full border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
							required
						/>
					</div>
					<div>
						<label for="age" class="block text-sm font-medium mb-1">
							Age <span class="text-red-500">*</span>
						</label>
						<input
							type="number"
							id="age"
							name="age"
							value={ageValue}
							placeholder="e.g., 30"
							min="0"
							class="w-full border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
							required
						/>
					</div>
				</div>

				<div class="flex justify-end">
					<button type="submit" id="submitBtn" class="btn">
						Suggest Gifts
					</button>
				</div>
			</form>

			<div class="mt-6" data-result-container>
				<h2 class="text-lg font-semibold mb-2">Suggested Gifts</h2>
				<div
					id="resultDisplay"
					class="min-h-[80px] p-4 border border-border-primary bg-bg-secondary text-text-primary"
				>
					{/* Display Server-Side Error */}
					{
						error && (
							<div class="text-red-500 mb-2" data-error-message>
								{error}
							</div>
						)
					}

					{/* Display Server-Side Results */}
					{
						result && result.length > 0 && (
							<ul
								class="list-none list-inside space-y-1"
								data-result-list
							>
								{result.map((suggestion) => {
									const productText =
										suggestion.product?.trim();
									if (!productText) return null; // Skip if product is empty

									// Construct Amazon search URL
									let amazonUrl = `https://www.amazon.com/s?k=${encodeURIComponent(productText)}`;
									if (
										minPriceValue &&
										!Number.isNaN(
											parseFloat(minPriceValue),
										) &&
										parseFloat(minPriceValue) >= 0
									) {
										amazonUrl += `&low-price=${minPriceValue}`;
									}
									if (
										maxPriceValue &&
										!Number.isNaN(
											parseFloat(maxPriceValue),
										) &&
										parseFloat(maxPriceValue) >= 0
									) {
										amazonUrl += `&high-price=${maxPriceValue}`;
									}

									return (
										<li class="flex justify-between items-center gap-2 flex-wrap">
											<span>{productText}</span>
											<div class="flex items-center gap-2 text-sm whitespace-nowrap">
												{suggestion.price && (
													<span class="text-gray-500">
														({suggestion.price})
													</span>
												)}
												<a
													href={amazonUrl}
													target="_blank"
													rel="noopener noreferrer"
													class="link"
												>
													Search Amazon
												</a>
											</div>
										</li>
									);
								})}
							</ul>
						)
					}

					{/* Initial Empty State / No Results State */}
					{
						!error && (!result || result.length === 0) && (
							<div
								class="text-center text-gray-500"
								data-empty-state
							>
								{Astro.request.method === "POST"
									? "No suggestions found for these criteria."
									: "Your suggested gifts will appear here."}
							</div>
						)
					}
				</div>
			</div>
		</div>

		<div class="card p-6 mt-6">
			<h2 class="font-bold text-lg mb-4">How it works</h2>
			<p>
				GiftSense uses AI to brainstorm gift ideas. Provide interests,
				age, and a price range for the best results.
			</p>
			<ul class="list-disc list-inside space-y-2 mt-2">
				<li>
					Enter descriptive tags (comma-separated) related to the
					person or occasion.
				</li>
				<li>Specify the recipient's age and your budget.</li>
				<li>
					Click "Suggest Gifts" to get AI-powered recommendations.
				</li>
			</ul>
		</div>
	</div>
</Layout>

<script>
	// Scroll to Result Script
	const resultContainer = document.querySelector(
		"[data-result-container]",
	) as HTMLElement;
	// Check for elements that indicate a result or error was rendered by the server
	const errorMessage = document.querySelector("[data-error-message]");
	const resultList = document.querySelector("[data-result-list]");

	// Only scroll if an error message or a result list is present
	if (resultContainer && (errorMessage || resultList)) {
		// Scroll after the browser has painted the page
		requestAnimationFrame(() => {
			window.scrollTo({
				top: resultContainer.offsetTop - 100, // Adjust offset as needed
				behavior: "smooth",
			});
		});
	}
</script>
