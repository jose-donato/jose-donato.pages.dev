---
import Icon from "../../components/Icon.astro";
import { optimize } from "svgo";
import Layout from "../../layouts/Layout.astro";
import { Code } from "astro:components";

function generateRandomId() {
	return (
		Math.random().toString(36).substring(2, 15) +
		Math.random().toString(36).substring(2, 15)
	);
}

function validateSvg(svg: string) {
	return /<svg[^>]+>/.test(svg);
}

type OptimizationOptions = {
	plugins: Array<{
		name: string;
		params?: {
			overrides: Record<string, any>;
		};
		active?: boolean;
	}>;
};

function optimizeSVG(svg: string, options: OptimizationOptions): string {
	return optimize(svg, options).data.trim();
}

function wrapWithSymbol(svg: string, id: string): string {
	return svg
		.replace(/^<svg/, `<symbol id="${id}"`)
		.replace(/<\/svg>$/, "</symbol>");
}

function replaceSVGColors(svg: string): string {
	return svg
		.replace(/fill="(?![^"]*none)[^"]+"/g, 'fill="currentColor"')
		.replace(/stroke="[^"]+"/g, 'stroke="currentColor"');
}

function treatSvg(
	svg: string,
	id: string,
	wrapSymbolWithSvg = false,
	replaceColors = false,
	keepDimensions = false,
): string {
	const optimizationOptions: OptimizationOptions = {
		plugins: [
			{
				name: "preset-default",
				params: {
					overrides: {
						mergePaths: {},
						removeUselessStrokeAndFill: {},
						removeViewBox: false,
						removeHiddenElems: false,
						collapseGroups: false,
						removeNonInheritableGroupAttrs: false,
						cleanupIds: {
							remove: false,
						},
						cleanupAttrs: {},
						convertPathData: {
							removeUseless: true,
							lineShorthands: true,
							applyTransforms: true,
						},
					},
				},
			},
			...(keepDimensions
				? []
				: [
						{
							name: "removeDimensions",
							active: !keepDimensions,
						},
					]),
		],
	};

	let svgString = optimizeSVG(svg, optimizationOptions);
	svgString = wrapWithSymbol(svgString, id);

	if (replaceColors) {
		svgString = replaceSVGColors(svgString);
	}

	if (wrapSymbolWithSvg) {
		svgString = `<svg>${svgString}</svg>`;
	}

	return svgString;
}

let symbol = "";
let error = "";

if (Astro.request.method === "POST") {
	try {
		const formData = await Astro.request.formData();
		const svg = formData.get("svg") as string;
		const slug = formData.get("slug");
		const includeSvg = formData.get("includeSvgTag") === "on";
		const replaceColors = formData.get("replaceColors") === "on";
		const keepDimensions = formData.get("keepDimensions") === "on";

		if (!svg || typeof svg !== "string") {
			console.log("No SVG provided");
			error = "No SVG provided";
		}
		if (!validateSvg(svg)) {
			console.log("Invalid SVG provided");
			error = "Invalid SVG provided";
		}
		const result = treatSvg(
			svg,
			slug ? slug.toString() : generateRandomId(),
			includeSvg,
			replaceColors,
			keepDimensions,
		);

		symbol = result;
	} catch (e) {
		error = "An error occurred while processing your request";
	}
}

// Static code strings for the examples
const usageExample = `<svg class="w-6 h-6">
  <use href="/sprite.svg#icon-name" />
</svg>`;

const componentExample = `// Icon component (adapt to your framework's syntax)
function Icon({ name, className, ...props }) {
  return (
    <svg className={className} {...props}>
      <use href={\`/sprite.svg#\${name}\`} />
    </svg>
  );
}`;

const componentUsageExample = `<Icon name="icon-name" className="w-6 h-6" />`;
---

<Layout>
  <div class="max-w-[700px] mx-auto">
    <h1 class="text-3xl font-bold mb-4 text-center">
      <span class="underline-animation">Sprite</span> your SVGs
    </h1>

    <div class="flex justify-center items-center flex-col gap-2 my-5">
        <p>Paste your SVG code below to generate an optimized sprite. Why?</p>
        <ul class="flex flex-col justify-start items-start">
          <li>
            <Icon id="checkmark-icon" className="w-3 h-3 inline-block mr-1 text-purple-400" />
            <span>Improved Performance: Fewer HTTP requests</span>
          </li>
          <li>
            <Icon id="checkmark-icon" className="w-3 h-3 inline-block mr-1 text-purple-400" />
            <span>Styling Flexibility: CSS-stylable icons</span>
          </li>
          <li>
            <Icon id="checkmark-icon" className="w-3 h-3 inline-block mr-1 text-purple-400" />
            <span>Smaller JS Bundle: Externalizes icon data</span>
          </li>
        </ul>
        <p class="text-xs text-zinc-500 dark:text-zinc-300">
          Still not convinced? Read more about it on
          <a
            href="https://benadam.me/thoughts/react-svg-sprites/"
            class="link"
            target="_blank"
            rel="noopener noreferrer"
          >
            Ben Adam blog post
          </a>,
          <a
            href="https://www.jacobparis.com/content/svg-icons"
            class="link"
            target="_blank"
            rel="noopener noreferrer"
          >
            Jacob Paris blog post
          </a>
          or
          <a
            href="https://github.com/epicweb-dev/epic-stack/blob/2c2a65d7e8d27c0e4e9bb00534d136a43a9d804d/docs/decisions/020-icons.md"
            class="link"
            target="_blank"
            rel="noopener noreferrer"
          >
            Kent C. Dodds' Epic Stack documentation
          </a>
        </p>
      </div>
    </div>
    
    <!-- Form section -->
    <form method="POST" class="card p-6 space-y-4">
      <div class="space-y-2">
        <label class="block text-sm font-medium">
          SVG (paste or drag and drop here)
          <textarea
            name="svg"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500"
            rows="4"
          />
        </label>
      </div>

      <div class="space-y-2">
        <label class="block text-sm font-medium">
          Icon slug (optional)
          <input
            type="text"
            name="slug"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500"
          />
        </label>
      </div>

      <div class="space-y-2">
        <label class="flex items-center gap-2">
          <input
            type="checkbox"
            name="includeSvgTag"
            class="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
          />
          <span class="text-sm">Include svg tag</span>
        </label>

        <label class="flex items-center gap-2">
          <input
            type="checkbox"
            name="replaceColors"
            class="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
          />
          <span class="text-sm">Replace colors with currentColor</span>
        </label>

        <label class="flex items-center gap-2">
          <input
            type="checkbox"
            name="keepDimensions"
            checked
            class="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
          />
          <span class="text-sm">Keep width/height attributes</span>
        </label>
      </div>
      
      <div class="flex justify-end">
        <button type="submit" class="btn">
          Convert
        </button>
      </div>
    </form>

    <div data-form-id="error" class="mt-4 text-red-500">{error}</div>
    
    <div class="card p-6 mt-6" style={symbol ? '' : 'display: none;'} data-result-container>
      <h2 class="font-bold text-lg mb-4">Result</h2>
        <Code wrap code={symbol} lang="xml" class="rounded p-1" id="result" />
      <div class="flex justify-end mt-4">
        <button 
          class="btn"
          data-copy
          data-content={symbol}
        >
          Copy
        </button>
      </div>
    </div>

    <div class="card p-6 mt-6">
      <h2 class="font-bold text-lg mb-4">How to use it?</h2>
      <ol class="list-decimal list-inside space-y-4 pl-2">
        <li>Paste your svg to be optimized and converted to a symbol</li>
        <li>
          Copy the generated code above and paste it in a file called 
          <code class="bg-gray-50 dark:bg-zinc-800 dark:border-zinc-700 rounded p-1 border border-gray-200">sprite.svg</code> 
          in the public folder of your project.
        </li>
        <li>
          Use the svg on your project like this:
          <div class="mt-2">
            <Code code={usageExample} lang="xml" class="rounded p-1" />
          </div>
        </li>
        <li>
          <strong>Bonus:</strong> Create a reusable Icon component in your framework of choice:
          <div class="mt-4">
            <Code code={componentExample} lang="jsx" class="rounded p-1" />
          </div>
          
          <p class="mt-4">Then use it like this:</p>
          <div class="mt-2">
            <Code code={componentUsageExample} lang="jsx" class="rounded p-1" />
          </div>
        </li>
      </ol>
    </div>
  </div>
</Layout>

<script>
  const resultContainer = document.querySelector('[data-result-container]');
  if (resultContainer && resultContainer instanceof HTMLElement && resultContainer.style.display !== 'none') {
    window.scrollTo({
      top: resultContainer.offsetTop - 100,
      behavior: 'smooth'
    });
  }
</script>