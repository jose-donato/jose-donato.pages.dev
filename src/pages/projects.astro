---
import Layout from "../layouts/Layout.astro";
import Icon from "../components/Icon.astro";
import SectionIcon from "../components/SectionIcon.astro";
import ContentCard from "../components/ContentCard.astro";
import { PROJECTS, TOOLS } from "../utils/constants";

const technologies = Array.from(
    new Set(PROJECTS.flatMap((project) => project.technologies)),
);
const url = new URL(Astro.request.url);
const query = url.searchParams.get("q") || "";
const filteredProjects = query
    ? PROJECTS.filter((project) => project.technologies.includes(query))
    : PROJECTS;

// Fetch GitHub stars for projects with GitHub URLs
const projectsWithStars = await Promise.all(
    filteredProjects.map(async (project) => {
        // Check if the URL is a GitHub repository URL
        if (project.url?.includes("github.com")) {
            try {
                // Extract owner and repo from GitHub URL
                const urlParts = new URL(project.url).pathname
                    .split("/")
                    .filter(Boolean);
                if (urlParts.length >= 2) {
                    const owner = urlParts[0];
                    const repo = urlParts[1];

                    // Fetch star count from GitHub API
                    const response = await fetch(
                        `https://api.github.com/repos/${owner}/${repo}`,
                    );
                    if (response.ok) {
                        const data = await response.json();
                        return { ...project, stars: data.stargazers_count };
                    }
                }
            } catch (error) {
                console.error(
                    `Error fetching stars for ${project.title}:`,
                    error,
                );
            }
        }
        return project;
    }),
);
---

<Layout
    seo={{
        title: "José Donato | Projects",
        description:
            "Personal portfolio showcasing projects and tools developed by José Donato.",
    }}
>
    <div class="space-y-20">
        <!-- Tools Section -->
        <section>
            <SectionIcon
                iconId="material-symbols-tools-wrench-outline-rounded"
                title="Tools"
                className="text-2xl"
            />
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {
                    TOOLS.map((tool) => {
                        return (
                            <ContentCard
                                title={tool.title}
                                description={tool.description}
                                actionButton={{
                                    text: "Try it out",
                                    href: `/tools/${tool.slug}`
                                }}
                                className="group flex flex-col"
                            />
                        );
                    })
                }
            </div>
        </section>

        <!-- Projects Section -->
        <section>
            <SectionIcon
                iconId="material-symbols-code"
                title="Projects"
                className="text-2xl"
            />

            {/* Filter Section */}
            <div class="mb-8">
                <div class="space-y-2">
                    <div class="flex flex-wrap gap-2">
                        {
                            technologies.map((tech) => (
                                <a
                                    href={`/projects?q=${tech}`}
                                    class={
                                        query === tech ? "btn" : "btn-outline"
                                    }
                                >
                                    {tech}
                                </a>
                            ))
                        }
                    </div>
                    {
                        query && (
                            <a href="/projects" class="btn gap-2 ml-auto">
                                <Icon
                                    id="system-uicons-reset"
                                    className="w-4 h-4"
                                />
                                Reset
                            </a>
                        )
                    }
                </div>
            </div>

            {/* Projects Grid */}
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {
                    projectsWithStars.map((project) => {
                        return (
                            <ContentCard
                                title={project.title}
                                description={project.description}
                                type={project.type}
                                technologies={project.technologies}
                                stars={project.stars}
                                actionButton={{
                                    text: "View project",
                                    href: project.url,
                                    target: "_blank",
                                    rel: "noreferrer noopener"
                                }}
                                className="group flex flex-col"
                            />
                        );
                    })
                }
            </div>
        </section>
    </div>
</Layout>

<script>
    // Preserve scroll position when filtering projects
    document.addEventListener("astro:before-preparation", () => {
        sessionStorage.setItem("scrollPosition", window.scrollY.toString());
    });

    document.addEventListener("astro:after-swap", () => {
        const scrollPosition = sessionStorage.getItem("scrollPosition");
        if (scrollPosition) {
            window.scrollTo(0, parseInt(scrollPosition));
            sessionStorage.removeItem("scrollPosition");
        }
    });
</script>
