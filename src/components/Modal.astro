---
interface Props {
  title: string;
  id: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  showHeader?: boolean;
  headerActions?: boolean;
}

const { 
  title, 
  id,
  size = 'lg',
  showHeader = true,
  headerActions = false
} = Astro.props;

const sizeClasses = {
  sm: 'max-width: 500px;',
  md: 'max-width: 700px;',
  lg: 'max-width: 1000px;',
  xl: 'max-width: 1200px;'
};
---

<modal-component data-modal-id={id}>
  <div class="modal-backdrop">
    <div class="modal-content" style={sizeClasses[size]}>
      {showHeader && (
        <div class="modal-header">
          <div class="modal-header-content">
            <h3 class="modal-title">{title}</h3>
            {headerActions && (
              <div class="modal-actions">
                <slot name="header-actions" />
              </div>
            )}
          </div>
          <button class="modal-close" aria-label="Close modal">
            <svg
              class="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      )}
      <div class="modal-body">
        <slot />
      </div>
    </div>
  </div>
</modal-component>

<script>
  class ModalComponent extends HTMLElement {
    private modal: HTMLElement | null = null;
    private backdrop: HTMLElement | null = null;
    private closeButton: HTMLElement | null = null;
    private modalId: string;

    constructor() {
      super();
      this.modalId = this.getAttribute("data-modal-id") || "";
      this.modal = this.querySelector(".modal-backdrop");
      this.backdrop = this.querySelector(".modal-backdrop");
      this.closeButton = this.querySelector(".modal-close");
    }

    connectedCallback() {
      this.setupEventListeners();
      this.hide(); // Initially hidden
    }

    setupEventListeners() {
      // Close on backdrop click
      this.backdrop?.addEventListener("click", (e) => {
        if (e.target === this.backdrop) {
          this.hide();
        }
      });

      // Close on close button click
      this.closeButton?.addEventListener("click", () => {
        this.hide();
      });

      // Close on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isVisible()) {
          this.hide();
        }
      });
    }

    show() {
      if (this.modal) {
        this.modal.style.display = "flex";
        document.body.style.overflow = "hidden";
        
        // Dispatch custom event for show
        this.dispatchEvent(new CustomEvent('modal:show', { 
          detail: { modalId: this.modalId }
        }));

        // Focus management
        this.closeButton?.focus();
      }
    }

    hide() {
      if (this.modal) {
        this.modal.style.display = "none";
        document.body.style.overflow = "";
        
        // Dispatch custom event for hide
        this.dispatchEvent(new CustomEvent('modal:hide', { 
          detail: { modalId: this.modalId }
        }));
      }
    }

    isVisible() {
      return this.modal?.style.display === "flex";
    }
  }

  customElements.define("modal-component", ModalComponent);

  // Global function to show modal
  window.showModal = (modalId: string) => {
    const modal = document.querySelector(
      `modal-component[data-modal-id="${modalId}"]`,
    ) as ModalComponent;
    if (modal) {
      modal.show();
    }
  };

  // Global function to hide modal
  window.hideModal = (modalId: string) => {
    const modal = document.querySelector(
      `modal-component[data-modal-id="${modalId}"]`,
    ) as ModalComponent;
    if (modal) {
      modal.hide();
    }
  };

  // Declare global function types
  declare global {
    interface Window {
      showModal: (modalId: string) => void;
      hideModal: (modalId: string) => void;
    }
  }
</script>

<style>
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 1rem;
  }

  .modal-content {
    background: var(--bg-primary, #1a1a1a);
    border-radius: 0.75rem;
    max-width: 90vw;
    max-height: 90vh;
    width: 100%;
    position: relative;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 1.5rem 1rem;
    border-bottom: 1px solid var(--border-primary, #333);
    position: sticky;
    top: 0;
    background: var(--bg-primary, #1a1a1a);
    z-index: 10;
  }

  .modal-header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary, #fff);
    margin: 0;
  }

  .modal-actions {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--text-muted, #888);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition:
      color 0.2s,
      background-color 0.2s;
    flex-shrink: 0;
  }

  .modal-close:hover {
    color: var(--text-primary, #fff);
    background-color: var(--bg-secondary, #2a2a2a);
  }

  .modal-body {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    height: 100%;
    overflow: hidden;
  }

  @media (max-width: 768px) {
    .modal-content {
      margin: 0.5rem;
      max-width: calc(100vw - 1rem);
      height: 95vh;
    }

    .modal-header {
      padding: 1rem 1rem 0.75rem;
    }

    .modal-body {
      padding: 1rem;
      overflow-y: auto;
    }

    .modal-title {
      font-size: 1.125rem;
    }
  }

  /* Custom scrollbar for modal body */
  .modal-body::-webkit-scrollbar {
    width: 6px;
  }

  .modal-body::-webkit-scrollbar-track {
    background: var(--bg-secondary, #2a2a2a);
    border-radius: 3px;
  }

  .modal-body::-webkit-scrollbar-thumb {
    background: var(--bullish-600, #4ade80);
    border-radius: 3px;
  }

  .modal-body::-webkit-scrollbar-thumb:hover {
    background: var(--bullish-500, #22c55e);
  }
</style>