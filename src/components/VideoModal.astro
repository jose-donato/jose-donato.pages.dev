---
interface Props {
  videoId: string;
  title?: string;
}

const { videoId, title = "Video" } = Astro.props;
---

<video-modal data-video-id={videoId} data-title={title}>
  <div class="modal-backdrop">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">{title}</h3>
        <button class="modal-close" aria-label="Close modal">
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="modal-body">
        <div class="video-container">
          <!-- Iframe will be dynamically loaded when modal opens -->
        </div>
      </div>
    </div>
  </div>
</video-modal>

<script>
  class VideoModal extends HTMLElement {
    private modal: HTMLElement | null = null;
    private backdrop: HTMLElement | null = null;
    private closeButton: HTMLElement | null = null;
    private iframe: HTMLIFrameElement | null = null;
    private videoContainer: HTMLElement | null = null;

    constructor() {
      super();
      this.modal = this.querySelector(".modal-backdrop");
      this.backdrop = this.querySelector(".modal-backdrop");
      this.closeButton = this.querySelector(".modal-close");
      this.videoContainer = this.querySelector(".video-container");
    }

    connectedCallback() {
      this.setupEventListeners();
      this.hide(); // Initially hidden
    }

    setupEventListeners() {
      // Close on backdrop click
      this.backdrop?.addEventListener("click", (e) => {
        if (e.target === this.backdrop) {
          this.hide();
        }
      });

      // Close on close button click
      this.closeButton?.addEventListener("click", () => {
        this.hide();
      });

      // Close on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isVisible()) {
          this.hide();
        }
      });
    }

    show() {
      if (this.modal) {
        this.modal.style.display = "flex";
        document.body.style.overflow = "hidden";
        
        // Create iframe dynamically
        this.createIframe();

        // Focus management
        this.closeButton?.focus();
      }
    }

    private createIframe() {
      if (!this.iframe && this.videoContainer) {
        const videoId = this.getAttribute("data-video-id");
        const title = this.getAttribute("data-title") || "Video";
        
        if (videoId) {
          this.iframe = document.createElement("iframe");
          this.iframe.className = "video-iframe";
          this.iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
          this.iframe.title = title;
          this.iframe.frameBorder = "0";
          this.iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture";
          this.iframe.allowFullscreen = true;
          
          this.videoContainer.appendChild(this.iframe);
        }
      }
    }

    hide() {
      if (this.modal) {
        this.modal.style.display = "none";
        document.body.style.overflow = "";

        // Remove iframe to stop video and save resources
        if (this.iframe && this.videoContainer) {
          this.videoContainer.removeChild(this.iframe);
          this.iframe = null;
        }
      }
    }

    isVisible() {
      return this.modal?.style.display === "flex";
    }
  }

  customElements.define("video-modal", VideoModal);

  // Global function to show video modal
  window.showVideoModal = (videoId: string, title?: string) => {
    let modal = document.querySelector(
      `video-modal[data-video-id="${videoId}"]`,
    ) as VideoModal;

    if (!modal) {
      // Create modal if it doesn't exist
      modal = document.createElement("video-modal") as VideoModal;
      modal.setAttribute("data-video-id", videoId);
      modal.setAttribute("data-title", title || "Video");

      modal.innerHTML = `
        <div class="modal-backdrop">
          <div class="modal-content">
            <div class="modal-header">
              <h3 class="modal-title">${title || "Video"}</h3>
              <button class="modal-close" aria-label="Close modal">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <div class="modal-body">
              <div class="video-container">
                <!-- Iframe will be dynamically loaded when modal opens -->
              </div>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    modal.show();
  };

  // Declare global function type
  declare global {
    interface Window {
      showVideoModal: (videoId: string, title?: string) => void;
    }
  }
</script>

<style>
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 1rem;
  }

  .modal-content {
    background: var(--bg-primary, #1a1a1a);
    border-radius: 0.75rem;
    max-width: 90vw;
    max-height: 90vh;
    width: 100%;
    max-width: 1200px;
    position: relative;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 1.5rem 1rem;
    border-bottom: 1px solid var(--border-primary, #333);
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary, #fff);
    margin: 0;
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--text-muted, #888);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition:
      color 0.2s,
      background-color 0.2s;
  }

  .modal-close:hover {
    color: var(--text-primary, #fff);
    background-color: var(--bg-secondary, #2a2a2a);
  }

  .modal-body {
    padding: 1.5rem 1.5rem 1.5rem;
  }

  .video-container {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
    border-radius: 0.5rem;
  }

  .video-iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
  }

  @media (max-width: 768px) {
    .modal-content {
      margin: 1rem;
      max-width: calc(100vw - 2rem);
    }

    .modal-header {
      padding: 1rem 1rem 0.75rem;
    }

    .modal-body {
      padding: 1rem 1rem 1rem;
    }

    .modal-title {
      font-size: 1.125rem;
    }
  }
</style>
