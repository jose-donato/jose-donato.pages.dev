---
import Modal from "./Modal.astro";

interface Props {
  videoId: string;
  title?: string;
}

const { videoId, title = "Video" } = Astro.props;
---

<Modal id={`video-${videoId}`} title={title} size="xl">
  <video-content data-video-id={videoId} data-title={title}>
    <div class="video-container">
      <!-- Iframe will be dynamically loaded when modal opens -->
    </div>
  </video-content>
</Modal>

<script>
  class VideoContent extends HTMLElement {
    private iframe: HTMLIFrameElement | null = null;
    private videoContainer: HTMLElement | null = null;
    private modal: HTMLElement | null = null;

    constructor() {
      super();
      this.videoContainer = this.querySelector(".video-container");
      const videoId = this.getAttribute("data-video-id");
      this.modal = document.querySelector(`modal-component[data-modal-id="video-${videoId}"]`);
    }

    connectedCallback() {
      // Listen for modal show event to create iframe
      this.modal?.addEventListener('modal:show', () => {
        this.createIframe();
      });

      // Listen for modal hide event to remove iframe
      this.modal?.addEventListener('modal:hide', () => {
        this.removeIframe();
      });
    }

    private createIframe() {
      if (!this.iframe && this.videoContainer) {
        const videoId = this.getAttribute("data-video-id");
        const title = this.getAttribute("data-title") || "Video";
        
        if (videoId) {
          this.iframe = document.createElement("iframe");
          this.iframe.className = "video-iframe";
          this.iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
          this.iframe.title = title;
          this.iframe.frameBorder = "0";
          this.iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture";
          this.iframe.allowFullscreen = true;
          
          this.videoContainer.appendChild(this.iframe);
        }
      }
    }

    private removeIframe() {
      // Remove iframe to stop video and save resources
      if (this.iframe && this.videoContainer) {
        this.videoContainer.removeChild(this.iframe);
        this.iframe = null;
      }
    }
  }

  customElements.define("video-content", VideoContent);

  // Global function to show video modal
  window.showVideoModal = (videoId: string, title?: string) => {
    const modalId = `video-${videoId}`;
    let modal = document.querySelector(
      `modal-component[data-modal-id="${modalId}"]`,
    );

    if (!modal) {
      // Create modal if it doesn't exist
      const modalElement = document.createElement("modal-component");
      modalElement.setAttribute("data-modal-id", modalId);
      
      modalElement.innerHTML = `
        <div class="modal-backdrop">
          <div class="modal-content" style="max-width: 1200px;">
            <div class="modal-header">
              <div class="modal-header-content">
                <h3 class="modal-title">${title || "Video"}</h3>
              </div>
              <button class="modal-close" aria-label="Close modal">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <div class="modal-body">
              <video-content data-video-id="${videoId}" data-title="${title || "Video"}">
                <div class="video-container">
                  <!-- Iframe will be dynamically loaded when modal opens -->
                </div>
              </video-content>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modalElement);
      modal = modalElement;
    }

    window.showModal(modalId);
  };

  // Declare global function type
  declare global {
    interface Window {
      showVideoModal: (videoId: string, title?: string) => void;
    }
  }
</script>

<style>
  .video-container {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
    border-radius: 0.5rem;
  }

  .video-iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
  }
</style>
