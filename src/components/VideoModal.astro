---
import Modal from "./Modal.astro";

interface Props {
  videoId: string;
  title?: string;
}

const { videoId, title = "Video" } = Astro.props;
---

<video-modal data-video-id={videoId} data-title={title}>
  <Modal id="video" title={title} maxWidth="1200px">
    <div class="relative w-full pb-[56.25%] h-0 overflow-hidden rounded-lg">
      <div class="video-container absolute top-0 left-0 w-full h-full">
        <!-- Iframe will be dynamically loaded when modal opens -->
      </div>
    </div>
  </Modal>
</video-modal>

<script>
  class VideoModal extends HTMLElement {
    private iframe: HTMLIFrameElement | null = null;
    private videoContainer: HTMLElement | null = null;

    constructor() {
      super();
      this.videoContainer = this.querySelector(".video-container");
    }

    connectedCallback() {
      this.setupEventListeners();
      this.hide();
    }

    setupEventListeners() {
      // Set up backdrop and close button listeners
      const backdrop = this.querySelector(".modal-backdrop");
      const closeButton = this.querySelector(".modal-close");

      backdrop?.addEventListener("click", (e) => {
        if (e.target === backdrop) {
          this.hide();
        }
      });

      closeButton?.addEventListener("click", () => {
        this.hide();
      });

      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isVisible()) {
          this.hide();
        }
      });
    }

    show() {
      const backdrop = this.querySelector(".modal-backdrop");
      if (backdrop) {
        backdrop.classList.remove("hidden");
        backdrop.classList.add("flex");
        document.body.style.overflow = "hidden";
        this.createIframe();

        // Dispatch custom event
        this.dispatchEvent(new CustomEvent("modal:show"));
      }
    }

    hide() {
      const backdrop = this.querySelector(".modal-backdrop");
      if (backdrop) {
        backdrop.classList.add("hidden");
        backdrop.classList.remove("flex");
        document.body.style.overflow = "";
        this.removeIframe();
      }
    }

    isVisible() {
      const backdrop = this.querySelector(".modal-backdrop");
      return backdrop?.classList.contains("flex") || false;
    }

    private createIframe() {
      if (!this.iframe && this.videoContainer) {
        const videoId = this.getAttribute("data-video-id");
        const title = this.getAttribute("data-title") || "Video";

        if (videoId) {
          this.iframe = document.createElement("iframe");
          this.iframe.className =
            "absolute top-0 left-0 w-full h-full rounded-lg";
          this.iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
          this.iframe.title = title;
          this.iframe.setAttribute("frameborder", "0");
          this.iframe.allow =
            "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture";
          this.iframe.allowFullscreen = true;

          this.videoContainer.appendChild(this.iframe);
          1;
        }
      }
    }

    private removeIframe() {
      if (this.iframe && this.videoContainer) {
        this.videoContainer.removeChild(this.iframe);
        this.iframe = null;
      }
    }
  }

  if (!customElements.get("video-modal")) {
    customElements.define("video-modal", VideoModal);
  } else {
  }

  // Global function to show video modal
  window.showVideoModal = (videoId: string, title?: string) => {
    // Use the existing VideoModal on the page
    let modal = document.querySelector("video-modal") as VideoModal;

    if (modal) {
      // Update the existing modal with new video data
      modal.setAttribute("data-video-id", videoId);
      modal.setAttribute("data-title", title || "Video");

      // Update the modal title
      const titleElement = modal.querySelector(".modal-title");
      if (titleElement) {
        titleElement.textContent = title || "Video";
      }

      // Force the show by directly manipulating the DOM if the custom element isn't working
      const backdrop = modal.querySelector(".modal-backdrop");
      if (backdrop) {
        backdrop.classList.remove("hidden");
        backdrop.classList.add("flex");
        document.body.style.overflow = "hidden";

        // Manually create iframe
        const videoContainer = modal.querySelector(".video-container");
        if (videoContainer) {
          const existingIframe = videoContainer.querySelector("iframe");
          if (!existingIframe) {
            const iframe = document.createElement("iframe");
            iframe.className = "absolute top-0 left-0 w-full h-full rounded-lg";
            iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
            iframe.title = title || "Video";
            iframe.setAttribute("frameborder", "0");
            iframe.allow =
              "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture";
            iframe.allowFullscreen = true;
            videoContainer.appendChild(iframe);
          }
        }

        // Setup close functionality
        const closeButton = modal.querySelector(".modal-close");
        const hideModal = () => {
          backdrop.classList.add("hidden");
          backdrop.classList.remove("flex");
          document.body.style.overflow = "";
          // Remove iframe to stop playback
          const videoContainer = modal.querySelector(".video-container");
          const iframe = videoContainer?.querySelector("iframe");
          if (iframe && videoContainer) {
            videoContainer.removeChild(iframe);
          }
        };

        closeButton?.addEventListener("click", hideModal);
        backdrop?.addEventListener("click", (e) => {
          if (e.target === backdrop) {
            hideModal();
          }
        });

        document.addEventListener("keydown", (e) => {
          if (e.key === "Escape" && backdrop.classList.contains("flex")) {
            hideModal();
          }
        });
      }
    }
  };

  // Declare global function type
  declare global {
    interface Window {
      showVideoModal: (videoId: string, title?: string) => void;
    }
  }
</script>
