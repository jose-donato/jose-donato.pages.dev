---
import { Tweet } from "@astro-community/astro-embed-twitter";
import Icon from "./Icon.astro";
import { socialMediaContent } from "../data/socialMedia";

// Filter and sort Twitter content only by date (newest first)
const twitterContent = socialMediaContent
  .filter((item) => item.type === "tweet")
  .sort((a, b) => {
    const [dayA, monthA, yearA] = a.date.split("-").map(Number);
    const [dayB, monthB, yearB] = b.date.split("-").map(Number);
    const dateA = new Date(yearA, monthA - 1, dayA);
    const dateB = new Date(yearB, monthB - 1, dayB);
    return dateB.getTime() - dateA.getTime();
  });
---

<twitter-demos-modal>
  <div class="modal-backdrop">
    <div class="modal-content">
      <div class="modal-header">
        <div class="flex items-center gap-3">
          <div
            class="flex-shrink-0 w-8 h-8 bg-bullish-500/10 rounded-lg flex items-center justify-center"
          >
            <Icon
              id="proicons-x-twitter"
              className="w-4 h-4 text-bullish-400"
            />
          </div>
          <h3 class="modal-title">Twitter/X Posts</h3>
        </div>
        <button class="modal-close" aria-label="Close modal">
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="modal-body">
        <p class="text-text-muted text-sm mb-6 leading-relaxed">
          Check out my latest Twitter posts showcasing demos, tools, and
          projects.
          <a
            href="https://x.com/josedonato__"
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-1 text-bullish-400 hover:text-bullish-300 transition-colors"
          >
            Follow me on X
          </a>
          for real-time updates on my development journey.
        </p>

        <div class="carousel-container">
          <button class="carousel-nav prev" aria-label="Previous tweet">
            <Icon
              id="material-symbols-chevron-left-rounded"
              className="w-5 h-5"
            />
          </button>

          <div class="carousel-wrapper">
            <div class="carousel-track">
              {
                twitterContent.map((item, index) => (
                  <div class="carousel-slide" data-index={index}>
                    <div class="tweet-container">
                      <Tweet theme="dark" id={item.url} />
                    </div>
                  </div>
                ))
              }
            </div>
          </div>

          <button class="carousel-nav next" aria-label="Next tweet">
            <Icon
              id="material-symbols-chevron-right-rounded"
              className="w-5 h-5"
            />
          </button>
        </div>

        <div class="carousel-indicators">
          {
            twitterContent.map((_, index) => (
              <button
                class="indicator"
                data-index={index}
                aria-label={`Go to tweet ${index + 1}`}
              />
            ))
          }
        </div>
      </div>
    </div>
  </div>
</twitter-demos-modal>

<script>
  class TwitterDemosModal extends HTMLElement {
    private modal: HTMLElement | null = null;
    private backdrop: HTMLElement | null = null;
    private closeButton: HTMLElement | null = null;
    private carouselTrack: HTMLElement | null = null;
    private prevButton: HTMLButtonElement | null = null;
    private nextButton: HTMLButtonElement | null = null;
    private indicators: NodeListOf<HTMLElement> | null = null;
    private currentIndex: number = 0;
    private totalSlides: number = 0;

    constructor() {
      super();
      this.modal = this.querySelector(".modal-backdrop");
      this.backdrop = this.querySelector(".modal-backdrop");
      this.closeButton = this.querySelector(".modal-close");
      this.carouselTrack = this.querySelector(".carousel-track");
      this.prevButton = this.querySelector(
        ".carousel-nav.prev",
      ) as HTMLButtonElement;
      this.nextButton = this.querySelector(
        ".carousel-nav.next",
      ) as HTMLButtonElement;
      this.indicators = this.querySelectorAll(".indicator");
      this.totalSlides = this.querySelectorAll(".carousel-slide").length;
    }

    connectedCallback() {
      this.setupEventListeners();
      this.updateCarousel();
      this.hide(); // Initially hidden
    }

    setupEventListeners() {
      // Close on backdrop click
      this.backdrop?.addEventListener("click", (e) => {
        if (e.target === this.backdrop) {
          this.hide();
        }
      });

      // Close on close button click
      this.closeButton?.addEventListener("click", () => {
        this.hide();
      });

      // Close on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isVisible()) {
          this.hide();
        } else if (this.isVisible()) {
          if (e.key === "ArrowLeft") {
            this.goToPrev();
          } else if (e.key === "ArrowRight") {
            this.goToNext();
          }
        }
      });

      // Carousel navigation
      this.prevButton?.addEventListener("click", () => {
        this.goToPrev();
      });

      this.nextButton?.addEventListener("click", () => {
        this.goToNext();
      });

      // Indicator clicks
      this.indicators?.forEach((indicator, index) => {
        indicator.addEventListener("click", () => {
          this.goToSlide(index);
        });
      });
    }

    goToPrev() {
      this.currentIndex =
        this.currentIndex > 0 ? this.currentIndex - 1 : this.totalSlides - 1;
      this.updateCarousel();
    }

    goToNext() {
      this.currentIndex =
        this.currentIndex < this.totalSlides - 1 ? this.currentIndex + 1 : 0;
      this.updateCarousel();
    }

    goToSlide(index: number) {
      this.currentIndex = index;
      this.updateCarousel();
    }

    updateCarousel() {
      if (this.carouselTrack) {
        const translateX = -this.currentIndex * 100;
        this.carouselTrack.style.transform = `translateX(${translateX}%)`;
      }

      // Update indicators
      this.indicators?.forEach((indicator, index) => {
        if (index === this.currentIndex) {
          indicator.classList.add("active");
        } else {
          indicator.classList.remove("active");
        }
      });

      // Update navigation buttons
      if (this.prevButton) {
        this.prevButton.style.opacity = this.totalSlides <= 1 ? "0.3" : "1";
        this.prevButton.disabled = this.totalSlides <= 1;
      }
      if (this.nextButton) {
        this.nextButton.style.opacity = this.totalSlides <= 1 ? "0.3" : "1";
        this.nextButton.disabled = this.totalSlides <= 1;
      }
    }

    show() {
      if (this.modal) {
        this.modal.style.display = "flex";
        document.body.style.overflow = "hidden";
        this.currentIndex = 0;
        this.updateCarousel();
        
        // Load Twitter embed script dynamically
        this.loadTwitterScript();

        // Focus management
        this.closeButton?.focus();
      }
    }

    private loadTwitterScript() {
      // Check if script is already loaded
      if (document.querySelector('script[src="https://platform.twitter.com/widgets.js"]')) {
        return;
      }

      const script = document.createElement('script');
      script.async = true;
      script.src = 'https://platform.twitter.com/widgets.js';
      document.head.appendChild(script);
    }

    hide() {
      if (this.modal) {
        this.modal.style.display = "none";
        document.body.style.overflow = "";
      }
    }

    isVisible() {
      return this.modal?.style.display === "flex";
    }
  }

  customElements.define("twitter-demos-modal", TwitterDemosModal);

  // Global function to show Twitter demos modal
  window.showTwitterDemosModal = () => {
    const modal = document.querySelector(
      "twitter-demos-modal",
    ) as TwitterDemosModal;
    if (modal) {
      modal.show();
    }
  };

  // Declare global function type
  declare global {
    interface Window {
      showTwitterDemosModal: () => void;
    }
  }
</script>

<style>
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 1rem;
  }

  .modal-content {
    background: var(--bg-primary, #1a1a1a);
    border-radius: 0.75rem;
    max-width: 90vw;
    max-height: 90vh;
    width: 100%;
    max-width: 1000px;
    height: 80vh;
    position: relative;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 1.5rem 1rem;
    border-bottom: 1px solid var(--border-primary, #333);
    position: sticky;
    top: 0;
    background: var(--bg-primary, #1a1a1a);
    z-index: 10;
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary, #fff);
    margin: 0;
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--text-muted, #888);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition:
      color 0.2s,
      background-color 0.2s;
  }

  .modal-close:hover {
    color: var(--text-primary, #fff);
    background-color: var(--bg-secondary, #2a2a2a);
  }

  .modal-body {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    height: 100%;
    overflow: hidden;
  }

  .carousel-container {
    position: relative;
    display: flex;
    align-items: center;
    gap: 1rem;
    flex: 1;
    min-height: 0;
  }

  .carousel-wrapper {
    flex: 1;
    overflow: hidden;
    border-radius: 0.75rem;
    height: 100%;
  }

  .carousel-track {
    display: flex;
    height: 100%;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .carousel-slide {
    width: 100%;
    flex-shrink: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem;
  }

  .tweet-container {
    display: flex;
    justify-content: center;
    width: 100%;
    max-width: 550px;
    overflow: hidden;
  }

  .tweet-container :global(iframe) {
    min-height: 500px !important;
    max-height: none !important;
    overflow-y: visible;
  }

  .tweet-container :global(blockquote) {
    min-height: 500px !important;
    max-height: none !important;
    overflow-y: visible;
    margin: 0 !important;
  }

  .carousel-nav {
    background: var(--bg-secondary, #2a2a2a);
    border: 1px solid var(--border-primary, #333);
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-muted, #888);
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .carousel-nav:hover:not(:disabled) {
    background: var(--bullish-600, #4ade80);
    border-color: var(--bullish-600, #4ade80);
    color: var(--bg-primary, #1a1a1a);
    transform: scale(1.05);
  }

  .carousel-nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .carousel-indicators {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 1.5rem;
  }

  .indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--border-primary, #333);
    border: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .indicator:hover {
    background: var(--text-muted, #888);
    transform: scale(1.2);
  }

  .indicator.active {
    background: var(--bullish-600, #4ade80);
    transform: scale(1.3);
  }

  @media (max-width: 768px) {
    .modal-content {
      margin: 0.5rem;
      max-width: calc(100vw - 1rem);
      height: 95vh;
    }

    .modal-header {
      padding: 1rem 1rem 0.75rem;
    }

    .modal-body {
      padding: 0.5rem;
      overflow-y: auto;
    }

    .modal-title {
      font-size: 1.125rem;
    }

    .carousel-container {
      flex-direction: column;
      gap: 1rem;
      height: 100%;
    }

    .carousel-wrapper {
      order: 1;
      height: auto;
      min-height: 400px;
    }

    .carousel-nav {
      display: none;
    }

    .tweet-container {
      max-width: 100%;
      width: 100%;
      padding: 0;
    }

    .carousel-slide {
      padding: 0;
      min-height: 400px;
    }

    .tweet-container :global(iframe) {
      width: 100% !important;
      max-width: 100% !important;
      min-height: 400px !important;
      max-height: none !important;
    }

    .tweet-container :global(blockquote) {
      width: 100% !important;
      max-width: 100% !important;
      min-height: 400px !important;
      max-height: none !important;
    }

    .carousel-indicators {
      order: 2;
      margin-top: 1rem;
    }
  }

  /* Custom scrollbar for modal body */
  .modal-body::-webkit-scrollbar {
    width: 6px;
  }

  .modal-body::-webkit-scrollbar-track {
    background: var(--bg-secondary, #2a2a2a);
    border-radius: 3px;
  }

  .modal-body::-webkit-scrollbar-thumb {
    background: var(--bullish-600, #4ade80);
    border-radius: 3px;
  }

  .modal-body::-webkit-scrollbar-thumb:hover {
    background: var(--bullish-500, #22c55e);
  }
</style>
