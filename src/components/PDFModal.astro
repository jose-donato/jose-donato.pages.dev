---
import Modal from "./Modal.astro";

interface Props {
  pdfPath: string;
  title?: string;
}

const { pdfPath, title = "PDF Document" } = Astro.props;

const downloadAction = `
  <a
    href="${pdfPath}"
    download
    class="bg-transparent border-none text-text-muted cursor-pointer p-2 rounded-md transition-colors duration-200 hover:text-text-primary hover:bg-bg-secondary text-decoration-none flex items-center justify-center"
    aria-label="Download PDF"
  >
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
    </svg>
  </a>
`;
---

<pdf-modal data-pdf-path={pdfPath} data-title={title}>
  <Modal id="pdf" title={title} maxWidth="900px" headerActions={downloadAction}>
    <div class="flex flex-col items-center">
      <pdf-viewer
        data-pdf-path={pdfPath}
        data-worker-path="//unpkg.com/pdfjs-dist@4.0.269/build/pdf.worker.min.mjs"
        class="w-full"
      >
      </pdf-viewer>

      <div class="pdf-navigation mt-4">
        <div class="flex items-center justify-center gap-4">
          <button
            id="modal-prev-page"
            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pl-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <svg
              class="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg>
            <span>Previous</span>
          </button>

          <span
            id="modal-current-page"
            class="flex items-center gap-2 px-4 py-2 text-sm"
          >
            <span id="modal-current-page-number">1</span>
            <span>/</span>
            <span id="modal-total-pages">1</span>
          </span>

          <button
            id="modal-next-page"
            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pr-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span>Next</span>
            <svg
              class="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </Modal>
</pdf-modal>

<script
  is:inline
  src="https://unpkg.com/pdfjs-dist@4.0.269/build/pdf.min.mjs"
  type="module"></script>

<script>
  declare global {
    interface Window {
      pdfjsLib?: any;
      showPDFModal?: (pdfPath: string, title?: string) => void;
    }
  }

  class PDFModalViewer extends HTMLElement {
    pdfPath;
    workerPath;
    loadingTask: any | null = null;
    canvas;
    pdfDocument: any = null;
    currentPage = 1;
    totalPages = 0;
    modalId: string;

    constructor() {
      super();
      this.attachShadow({ mode: "open" });
      this.pdfPath = this.getAttribute("data-pdf-path");
      this.workerPath = this.getAttribute("data-worker-path");
      this.modalId = `modal-${Math.random().toString(36).substr(2, 9)}`;

      this.canvas = document.createElement("canvas");
      this.canvas.setAttribute("id", "pdf-canvas");
      this.canvas.style.maxWidth = "100%";
      this.canvas.style.height = "auto";
      this.canvas.style.border = "1px solid #444";
      this.canvas.style.borderRadius = "4px";
      this.canvas.style.direction = "ltr";
      this.canvas.style.display = "block";
      this.canvas.style.margin = "0 auto";

      const style = document.createElement("style");
      style.textContent = `
        :host {
          display: block;
          width: 100%;
          margin: 0 auto;
        }
        canvas {
          box-shadow: 0 2px 8px rgba(0,0,0,0.2);
          max-width: 100%;
          height: auto !important;
          display: block;
          margin: 0 auto;
        }
      `;

      this.shadowRoot?.append(style, this.canvas);
    }

    async renderPage(pageNum: number) {
      if (!this.pdfDocument) return;

      this.currentPage = pageNum;
      const pdfPage = await this.pdfDocument.getPage(pageNum);

      // Get the original viewport to maintain aspect ratio
      const originalViewport = pdfPage.getViewport({ scale: 1.0 });

      // Calculate scale to fit modal while maintaining aspect ratio
      const modalMaxWidth = Math.min(700, window.innerWidth * 0.7);
      const modalMaxHeight = Math.min(600, window.innerHeight * 0.6);

      const scaleX = modalMaxWidth / originalViewport.width;
      const scaleY = modalMaxHeight / originalViewport.height;
      const scale = Math.min(scaleX, scaleY); // Use the smaller scale to maintain aspect ratio

      const viewport = pdfPage.getViewport({ scale });

      const ctx = this.canvas.getContext("2d");
      if (!this.canvas || !ctx) return;

      // Set the actual canvas size to match the scaled viewport
      this.canvas.width = viewport.width;
      this.canvas.height = viewport.height;

      // Set the display size to maintain aspect ratio
      this.canvas.style.width = `${viewport.width}px`;
      this.canvas.style.height = `${viewport.height}px`;
      this.canvas.style.maxWidth = "100%";

      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      const renderTask = pdfPage.render({
        canvasContext: ctx,
        viewport: viewport,
      });

      await renderTask.promise;
      this.updatePaginationUI();
    }

    updatePaginationUI() {
      const currentPageSpan = document.getElementById(
        "modal-current-page-number",
      );
      const totalPagesSpan = document.getElementById("modal-total-pages");

      if (currentPageSpan) {
        currentPageSpan.textContent = this.currentPage.toString();
      }
      if (totalPagesSpan) {
        totalPagesSpan.textContent = this.totalPages.toString();
      }

      const prevButton = document.getElementById(
        "modal-prev-page",
      ) as HTMLButtonElement;
      const nextButton = document.getElementById(
        "modal-next-page",
      ) as HTMLButtonElement;

      if (prevButton) {
        prevButton.disabled = this.currentPage <= 1;
      }
      if (nextButton) {
        nextButton.disabled = this.currentPage >= this.totalPages;
      }
    }

    async load() {
      if (!this.loadingTask) return;

      try {
        this.pdfDocument = await this.loadingTask.promise;
        this.totalPages = this.pdfDocument.numPages;
        await this.renderPage(1);
        this.setupPaginationControls();
      } catch (error) {
        console.error("Error loading PDF document:", error);
      }
    }

    setupPaginationControls() {
      const prevButton = document.getElementById(
        "modal-prev-page",
      ) as HTMLButtonElement;
      const nextButton = document.getElementById(
        "modal-next-page",
      ) as HTMLButtonElement;

      if (prevButton) {
        prevButton.onclick = (e) => {
          e.preventDefault();
          if (this.currentPage > 1) {
            this.renderPage(this.currentPage - 1);
          }
        };
      }

      if (nextButton) {
        nextButton.onclick = (e) => {
          e.preventDefault();
          if (this.currentPage < this.totalPages) {
            this.renderPage(this.currentPage + 1);
          }
        };
      }
    }

    handleLoaded() {
      if (!window.pdfjsLib) {
        setTimeout(() => this.handleLoaded(), 100);
        return;
      }

      try {
        window.pdfjsLib.GlobalWorkerOptions.workerSrc = this.workerPath;
        this.loadingTask = window.pdfjsLib.getDocument(this.pdfPath);
        this.load();
      } catch (error) {
        console.error("Error loading PDF:", error);
      }
    }

    connectedCallback() {
      if (!this.pdfPath || !this.workerPath) return;

      if (document.readyState === "loading") {
        window.addEventListener(
          "DOMContentLoaded",
          this.handleLoaded.bind(this),
        );
      } else {
        this.handleLoaded();
      }
    }
  }

  class PDFModal extends HTMLElement {
    private baseModal: any = null;
    private pdfViewer: PDFModalViewer | null = null;

    constructor() {
      super();
      this.pdfViewer = this.querySelector("pdf-viewer") as PDFModalViewer;
    }

    connectedCallback() {
      this.setupEventListeners();
      this.hide();
    }

    setupEventListeners() {
      // Set up backdrop and close button listeners
      const backdrop = this.querySelector(".modal-backdrop");
      const closeButton = this.querySelector(".modal-close");

      backdrop?.addEventListener("click", (e) => {
        if (e.target === backdrop) {
          this.hide();
        }
      });

      closeButton?.addEventListener("click", () => {
        this.hide();
      });

      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isVisible()) {
          this.hide();
        }
      });
    }

    show() {
      const backdrop = this.querySelector(".modal-backdrop");
      if (backdrop) {
        backdrop.classList.remove("hidden");
        backdrop.classList.add("flex");
        document.body.style.overflow = "hidden";
      }
    }

    hide() {
      const backdrop = this.querySelector(".modal-backdrop");
      if (backdrop) {
        backdrop.classList.add("hidden");
        backdrop.classList.remove("flex");
        document.body.style.overflow = "";
      }
    }

    isVisible() {
      const backdrop = this.querySelector(".modal-backdrop");
      return backdrop?.classList.contains("flex") || false;
    }
  }

  if (!customElements.get("pdf-viewer")) {
    customElements.define("pdf-viewer", PDFModalViewer);
  }
  if (!customElements.get("pdf-modal")) {
    customElements.define("pdf-modal", PDFModal);
  }

  // Global function to show PDF modal
  window.showPDFModal = (pdfPath: string, title?: string) => {
    let modal = document.querySelector(
      `pdf-modal[data-pdf-path="${pdfPath}"]`,
    ) as PDFModal;

    if (!modal) {
      modal = document.createElement("pdf-modal") as PDFModal;
      modal.setAttribute("data-pdf-path", pdfPath);
      modal.setAttribute("data-title", title || "PDF Document");

      const downloadAction = `
        <a
          href="${pdfPath}"
          download
          class="bg-transparent border-none text-text-muted cursor-pointer p-2 rounded-md transition-colors duration-200 hover:text-text-primary hover:bg-bg-secondary text-decoration-none flex items-center justify-center"
          aria-label="Download PDF"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </a>
      `;

      modal.innerHTML = `
        <div class="modal-backdrop fixed inset-0 bg-black/80 hidden items-center justify-center z-[1000] p-4" id="pdf-backdrop">
          <div class="modal-content bg-bg-primary rounded-xl w-full relative shadow-2xl overflow-hidden" style="max-width: 900px; max-height: 90vh;">
            <div class="modal-header flex items-center justify-between p-6 pb-4 border-b border-border-primary sticky top-0 bg-bg-primary z-10">
              <h3 class="modal-title text-xl font-semibold text-text-primary m-0">${title || "PDF Document"}</h3>
              <div class="modal-actions flex items-center gap-2">
                ${downloadAction}
                <button class="modal-close bg-transparent border-none text-text-muted cursor-pointer p-2 rounded-md transition-colors duration-200 hover:text-text-primary hover:bg-bg-secondary" aria-label="Close modal">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
            </div>
            <div class="modal-body p-6">
              <div class="flex flex-col items-center">
                <pdf-viewer
                  data-pdf-path="${pdfPath}"
                  data-worker-path="//unpkg.com/pdfjs-dist@4.0.269/build/pdf.worker.min.mjs"
                  class="w-full"
                >
                </pdf-viewer>
                
                <div class="pdf-navigation mt-4">
                  <div class="flex items-center justify-center gap-4">
                    <button 
                      id="modal-prev-page"
                      class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pl-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                      </svg>
                      <span>Previous</span>
                    </button>
                    
                    <span id="modal-current-page" class="flex items-center gap-2 px-4 py-2 text-sm">
                      <span id="modal-current-page-number">1</span>
                      <span>/</span>
                      <span id="modal-total-pages">1</span>
                    </span>
                    
                    <button 
                      id="modal-next-page"
                      class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pr-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <span>Next</span>
                      <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    modal.show();
  };
</script>
