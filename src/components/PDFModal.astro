---
import Modal from "./Modal.astro";

interface Props {
  pdfPath: string;
  title?: string;
}

const { pdfPath, title = "PDF Document" } = Astro.props;
---

<Modal id={`pdf-${Math.random().toString(36).substr(2, 9)}`} title={title} size="lg" headerActions={true}>
  <a slot="header-actions"
    href={pdfPath}
    download
    class="modal-download"
    aria-label="Download PDF"
  >
    <svg
      class="w-5 h-5"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
    </svg>
  </a>

  <pdf-content data-pdf-path={pdfPath} data-title={title}>
    <div class="pdf-wrapper">
      <pdf-viewer
        data-pdf-path={pdfPath}
        data-worker-path="//unpkg.com/pdfjs-dist@4.0.269/build/pdf.worker.min.mjs"
        class="w-full"
      >
      </pdf-viewer>

      <div class="pdf-navigation mt-4">
        <div class="flex items-center justify-center gap-4">
          <button
            id="modal-prev-page"
            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pl-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <svg
              class="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg>
            <span>Previous</span>
          </button>

          <span
            id="modal-current-page"
            class="flex items-center gap-2 px-4 py-2 text-sm"
          >
            <span id="modal-current-page-number">1</span>
            <span>/</span>
            <span id="modal-total-pages">1</span>
          </span>

          <button
            id="modal-next-page"
            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pr-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span>Next</span>
            <svg
              class="h-4 w-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </pdf-content>
</Modal>

<script
  is:inline
  src="https://unpkg.com/pdfjs-dist@4.0.269/build/pdf.min.mjs"
  type="module"></script>

<script>
  declare global {
    interface Window {
      pdfjsLib?: any;
      showPDFModal?: (pdfPath: string, title?: string) => void;
    }
  }

  class PDFContent extends HTMLElement {
    private modal: HTMLElement | null = null;

    constructor() {
      super();
      const pdfPath = this.getAttribute("data-pdf-path");
      // Generate a more stable ID for PDF modals
      const modalId = `pdf-${btoa(pdfPath || '').replace(/[^a-zA-Z0-9]/g, '').substring(0, 10)}`;
      this.modal = document.querySelector(`modal-component[data-modal-id="${modalId}"]`);
    }

    connectedCallback() {
      // No special handling needed - PDF viewer is already initialized
    }
  }

  class PDFModalViewer extends HTMLElement {
    pdfPath;
    workerPath;
    loadingTask: any | null = null;
    canvas;
    pdfDocument: any = null;
    currentPage = 1;
    totalPages = 0;
    modalId: string;

    constructor() {
      super();
      this.attachShadow({ mode: "open" });
      this.pdfPath = this.getAttribute("data-pdf-path");
      this.workerPath = this.getAttribute("data-worker-path");
      this.modalId = `modal-${Math.random().toString(36).substr(2, 9)}`;

      this.canvas = document.createElement("canvas");
      this.canvas.setAttribute("id", "pdf-canvas");
      this.canvas.style.maxWidth = "100%";
      this.canvas.style.height = "auto";
      this.canvas.style.border = "1px solid #444";
      this.canvas.style.borderRadius = "4px";
      this.canvas.style.direction = "ltr";
      this.canvas.style.display = "block";
      this.canvas.style.margin = "0 auto";

      const style = document.createElement("style");
      style.textContent = `
        :host {
          display: block;
          width: 100%;
          margin: 0 auto;
        }
        canvas {
          box-shadow: 0 2px 8px rgba(0,0,0,0.2);
          max-width: 100%;
          height: auto !important;
          display: block;
          margin: 0 auto;
        }
      `;

      this.shadowRoot?.append(style, this.canvas);
    }

    async renderPage(pageNum: number) {
      if (!this.pdfDocument) return;

      this.currentPage = pageNum;
      const pdfPage = await this.pdfDocument.getPage(pageNum);

      // Get the original viewport to maintain aspect ratio
      const originalViewport = pdfPage.getViewport({ scale: 1.0 });

      // Calculate scale to fit modal while maintaining aspect ratio
      const modalMaxWidth = Math.min(700, window.innerWidth * 0.7);
      const modalMaxHeight = Math.min(600, window.innerHeight * 0.6);

      const scaleX = modalMaxWidth / originalViewport.width;
      const scaleY = modalMaxHeight / originalViewport.height;
      const scale = Math.min(scaleX, scaleY); // Use the smaller scale to maintain aspect ratio

      const viewport = pdfPage.getViewport({ scale });

      const ctx = this.canvas.getContext("2d");
      if (!this.canvas || !ctx) return;

      // Set the actual canvas size to match the scaled viewport
      this.canvas.width = viewport.width;
      this.canvas.height = viewport.height;

      // Set the display size to maintain aspect ratio
      this.canvas.style.width = `${viewport.width}px`;
      this.canvas.style.height = `${viewport.height}px`;
      this.canvas.style.maxWidth = "100%";

      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

      const renderTask = pdfPage.render({
        canvasContext: ctx,
        viewport: viewport,
      });

      await renderTask.promise;
      this.updatePaginationUI();
    }

    updatePaginationUI() {
      const currentPageSpan = document.getElementById(
        "modal-current-page-number",
      );
      const totalPagesSpan = document.getElementById("modal-total-pages");

      if (currentPageSpan) {
        currentPageSpan.textContent = this.currentPage.toString();
      }
      if (totalPagesSpan) {
        totalPagesSpan.textContent = this.totalPages.toString();
      }

      const prevButton = document.getElementById(
        "modal-prev-page",
      ) as HTMLButtonElement;
      const nextButton = document.getElementById(
        "modal-next-page",
      ) as HTMLButtonElement;

      if (prevButton) {
        prevButton.disabled = this.currentPage <= 1;
      }
      if (nextButton) {
        nextButton.disabled = this.currentPage >= this.totalPages;
      }
    }

    async load() {
      if (!this.loadingTask) return;

      try {
        this.pdfDocument = await this.loadingTask.promise;
        this.totalPages = this.pdfDocument.numPages;
        await this.renderPage(1);
        this.setupPaginationControls();
      } catch (error) {
        console.error("Error loading PDF document:", error);
      }
    }

    setupPaginationControls() {
      const prevButton = document.getElementById(
        "modal-prev-page",
      ) as HTMLButtonElement;
      const nextButton = document.getElementById(
        "modal-next-page",
      ) as HTMLButtonElement;

      if (prevButton) {
        prevButton.onclick = (e) => {
          e.preventDefault();
          if (this.currentPage > 1) {
            this.renderPage(this.currentPage - 1);
          }
        };
      }

      if (nextButton) {
        nextButton.onclick = (e) => {
          e.preventDefault();
          if (this.currentPage < this.totalPages) {
            this.renderPage(this.currentPage + 1);
          }
        };
      }
    }

    handleLoaded() {
      if (!window.pdfjsLib) {
        setTimeout(() => this.handleLoaded(), 100);
        return;
      }

      try {
        window.pdfjsLib.GlobalWorkerOptions.workerSrc = this.workerPath;
        this.loadingTask = window.pdfjsLib.getDocument(this.pdfPath);
        this.load();
      } catch (error) {
        console.error("Error loading PDF:", error);
      }
    }

    connectedCallback() {
      if (!this.pdfPath || !this.workerPath) return;

      if (document.readyState === "loading") {
        window.addEventListener(
          "DOMContentLoaded",
          this.handleLoaded.bind(this),
        );
      } else {
        this.handleLoaded();
      }
    }
  }

  class PDFModal extends HTMLElement {
    private modal: HTMLElement | null = null;
    private backdrop: HTMLElement | null = null;
    private closeButton: HTMLElement | null = null;
    private pdfViewer: PDFModalViewer | null = null;

    constructor() {
      super();
      this.modal = this.querySelector(".modal-backdrop");
      this.backdrop = this.querySelector(".modal-backdrop");
      this.closeButton = this.querySelector(".modal-close");
      this.pdfViewer = this.querySelector("pdf-viewer") as PDFModalViewer;
    }

    connectedCallback() {
      this.setupEventListeners();
      this.hide();
    }

    setupEventListeners() {
      this.backdrop?.addEventListener("click", (e) => {
        if (e.target === this.backdrop) {
          this.hide();
        }
      });

      this.closeButton?.addEventListener("click", () => {
        this.hide();
      });

      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isVisible()) {
          this.hide();
        }
      });
    }

    show() {
      if (this.modal) {
        this.modal.style.display = "flex";
        document.body.style.overflow = "hidden";
        this.closeButton?.focus();
      }
    }

    hide() {
      if (this.modal) {
        this.modal.style.display = "none";
        document.body.style.overflow = "";
      }
    }

    isVisible() {
      return this.modal?.style.display === "flex";
    }
  }

  customElements.define("pdf-content", PDFContent);
  customElements.define("pdf-viewer", PDFModalViewer);
  customElements.define("pdf-modal", PDFModal);

  // Global function to show PDF modal
  window.showPDFModal = (pdfPath: string, title?: string) => {
    // Generate a stable modal ID based on the PDF path
    const modalId = `pdf-${btoa(pdfPath).replace(/[^a-zA-Z0-9]/g, '').substring(0, 10)}`;
    let modal = document.querySelector(
      `modal-component[data-modal-id="${modalId}"]`,
    );

    if (!modal) {
      modal = document.createElement("modal-component");
      modal.setAttribute("data-modal-id", modalId);

      modal.innerHTML = `
        <div class="modal-backdrop">
          <div class="modal-content" style="max-width: 900px;">
            <div class="modal-header">
              <div class="modal-header-content">
                <h3 class="modal-title">${title || "PDF Document"}</h3>
                <div class="modal-actions">
                  <a href="${pdfPath}" download class="modal-download" aria-label="Download PDF">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                  </a>
                </div>
              </div>
              <button class="modal-close" aria-label="Close modal">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <div class="modal-body">
              <pdf-content data-pdf-path="${pdfPath}" data-title="${title || "PDF Document"}">
                <div class="pdf-wrapper">
                  <pdf-viewer
                    data-pdf-path="${pdfPath}"
                    data-worker-path="//unpkg.com/pdfjs-dist@4.0.269/build/pdf.worker.min.mjs"
                    class="w-full"
                  >
                  </pdf-viewer>
                  
                  <div class="pdf-navigation mt-4">
                    <div class="flex items-center justify-center gap-4">
                      <button 
                        id="modal-prev-page"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pl-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                        <span>Previous</span>
                      </button>
                      
                      <span id="modal-current-page" class="flex items-center gap-2 px-4 py-2 text-sm">
                        <span id="modal-current-page-number">1</span>
                        <span>/</span>
                        <span id="modal-total-pages">1</span>
                      </span>
                      
                      <button 
                        id="modal-next-page"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-border-focus h-10 px-4 py-2 gap-1 pr-2.5 hover:bg-bg-secondary text-text-secondary hover:text-text-primary disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <span>Next</span>
                        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </pdf-content>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
    }

    window.showModal(modalId);
  };
</script>

<style>
  .modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 1rem;
  }

  .modal-content {
    background: var(--bg-primary, #1a1a1a);
    border-radius: 0.75rem;
    max-width: 90vw;
    max-height: 90vh;
    width: 100%;
    max-width: 900px;
    position: relative;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    overflow: hidden;
  }

  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 1.5rem 1rem;
    border-bottom: 1px solid var(--border-primary, #333);
  }

  .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary, #fff);
    margin: 0;
  }

  .modal-actions {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .modal-download {
    background: none;
    border: none;
    color: var(--text-muted, #888);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition:
      color 0.2s,
      background-color 0.2s;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-download:hover {
    color: var(--text-primary, #fff);
    background-color: var(--bg-secondary, #2a2a2a);
  }

  .modal-close {
    background: none;
    border: none;
    color: var(--text-muted, #888);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    transition:
      color 0.2s,
      background-color 0.2s;
  }

  .modal-close:hover {
    color: var(--text-primary, #fff);
    background-color: var(--bg-secondary, #2a2a2a);
  }

  .modal-body {
    padding: 1.5rem 1.5rem 1.5rem;
    max-height: calc(90vh - 100px);
    overflow-y: auto;
  }

  .pdf-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .pdf-navigation {
    margin-top: 1rem;
  }

  .flex {
    display: flex;
  }

  .items-center {
    align-items: center;
  }

  .justify-center {
    justify-content: center;
  }

  .gap-4 {
    gap: 1rem;
  }

  .gap-2 {
    gap: 0.5rem;
  }

  .mt-4 {
    margin-top: 1rem;
  }

  .px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
  }

  .py-2 {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .text-sm {
    font-size: 0.875rem;
  }

  @media (max-width: 768px) {
    .modal-content {
      margin: 1rem;
      max-width: calc(100vw - 2rem);
      max-height: calc(100vh - 2rem);
    }

    .modal-header {
      padding: 1rem 1rem 0.75rem;
    }

    .modal-body {
      padding: 1rem 1rem 1rem;
      max-height: calc(100vh - 120px);
    }

    .modal-title {
      font-size: 1.125rem;
    }
  }
</style>
